@page "/forgot-password"
@inject NavigationManager NavManager
@inject IUser UserService
@inject IJSRuntime js
@inject IStringLocalizer<Resource> localizer

<div class="container" style="width:377px">
    <div class="row">
        <div class="col">
            <EditForm Enhance style="@SendVerifyTokenStyle" Model="RequestResetPasswordTokenDTO" OnValidSubmit="SendVerifyToken">
                <DataAnnotationsValidator />
                <div class="card">
                    <div class="card-header"><p class="mt-3 fw-bold text-center">@localizer["Recover Password"]</p></div>
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <FloatingText class="form-control"
                                          Type="email"
                                          @bind-Value="RequestResetPasswordTokenDTO.Email"
                                          Placeholder="Email"
                                          Label="Email">
                            </FloatingText>
                            <ValidationMessage For="()=>RequestResetPasswordTokenDTO.Email" />
                        </div>
                        <p><a class="pe-auto" href="/login">← @localizer["Back to login"]</a></p>
                        <div class="form-group mb-4">
                            <div class="d-grid gap-2">
                                <Button @ref="SendTokenBtn" Type="ButtonType.Submit" class="btn btn-primary">
                                    ➣ @localizer[SendTokenBtnText]
                                </Button>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>

            <EditForm Enhance style="@ResetPasswordStyle" EditContext="@EditContext" OnValidSubmit="ResetPassword">
                <DataAnnotationsValidator />
                <div class="card">
                    <div class="card-header"><p class="mt-3 fw-bold text-center">@localizer["Recover Password"]</p></div>
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <FloatingText class="form-control"
                                       Type="email"
                                       @bind-Value="ResetPasswordDTO.Email"
                                       Placeholder="Email"
                                       Label="Email"
                                       readonly="true">
                            </FloatingText>
                            <ValidationMessage For="()=>ResetPasswordDTO.Email" />
                        </div>
                        <div>
                            <div class="form-group mb-3">
                                <FloatingText class="form-control"
                                              Type="@(ShowPassword is true? "text":"password")"
                                              @bind-Value="ResetPasswordDTO.NewPassword"
                                              Placeholder="@localizer["New Password"]"
                                              Label="@localizer["New Password"]">
                                </FloatingText>
                                <ValidationMessage For="()=>ResetPasswordDTO.NewPassword" />
                            </div>
                            <div class="form-group mb-3">
                                <FloatingText class="form-control"
                                              Type="@(ShowPassword is true? "text":"password")"
                                              @bind-Value="ResetPasswordDTO.ConfirmPassword"
                                              Placeholder="@localizer["Confirm Password"]"
                                              Label="@localizer["Confirm Password"]">
                                </FloatingText>
                                <ValidationMessage For="()=>ResetPasswordDTO.ConfirmPassword" />
                            </div>
                            @* <div class="mb-3">
                                <input class="form-check-input"
                                       style="height:17px; width:17px"
                                       type="checkbox"
                                       checked=@ShowPassword
                                       @onchange="eventArgs => { ShowPasswordCheckboxClicked(eventArgs.Value!); }">
                                <label class="ms-1 fw-bold" style="margin-top: 1px">@localizer["Show Password"]</label>
                            </div> *@
                            <p><a class="pe-auto" href="/login">← @localizer["Back to login"]</a></p>

                            <div class="form-group mb-4">
                                <div class="d-grid gap-2">
                                    <Button @ref="ResetPasswordBtn" class="btn btn-primary"
                                            Type="ButtonType.Submit">
                                        ♺ @localizer["Change Password"]
                                    </Button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>
<Modal @ref="Modal" OnHidden="OnResponseModalHidden" Title="⚠ Redmine2.0">
    <BodyTemplate>
        @localizer[ModalMessage]
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">✖ @localizer["Close"]</Button>
    </FooterTemplate>
</Modal>

@code{
    /// <summary>
    /// MyApp
    /// </summary>
    [CascadingParameter] public App MyApp { get; set; } = new();

    /// <summary>
    /// Modal
    /// </summary>
    private Modal Modal = default!;

    /// <summary>
    /// SendTokenBtn
    /// </summary>
    private Button SendTokenBtn = default!;

    /// <summary>
    /// ResetPasswordBtn
    /// </summary>
    private Button ResetPasswordBtn = default!;

    /// <summary>
    /// Response
    /// </summary>
    private PostPutResponse Response = new(false, string.Empty);

    /// <summary>
    /// ModalMessage
    /// </summary>
    private string ModalMessage { get; set; } = string.Empty;

    /// <summary>
    /// ResetPasswordDTO
    /// </summary>
    private ResetPasswordDTO ResetPasswordDTO { get; set; } = new();

    /// <summary>
    /// EditContext
    /// </summary>
    private EditContext EditContext = new(new ResetPasswordDTO());

    /// <summary>
    /// RequestResetPasswordTokenDTO
    /// </summary>
    private RequestResetPasswordTokenDTO RequestResetPasswordTokenDTO { get; set; } = new();

    /// <summary>
    /// Token
    /// </summary>
    public string Token = string.Empty;

    /// <summary>
    /// Email
    /// </summary>
    public string Email = string.Empty;

    /// <summary>
    /// UserId
    /// </summary>
    public string UserId = string.Empty;

    /// <summary>
    /// ShowPassword
    /// </summary>
    public bool ShowPassword { get; set; }

    /// <summary>
    /// SendVerifyTokenStyle
    /// </summary>
    private string SendVerifyTokenStyle = "display:none";

    /// <summary>
    /// ResetPasswordStyle
    /// </summary>
    private string ResetPasswordStyle = "display:none";

    /// <summary>
    /// SendTokenBtnText
    /// </summary>
    private string SendTokenBtnText = "Send Verify Token";

    /// <summary>
    /// OnInitializedAsync
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        MyApp.SetLayout(typeof(EmptyLayout));
        GetQueryString();
        SetUpEditContext();

        if (!string.IsNullOrEmpty(Token))
        {
            bool isTokenAlive = await IsPasswordResetTokenAlive();
            if (!isTokenAlive)
            {
                NavManager.NavigateTo("/bad-request", true);
                return;
            }
            ResetPasswordStyle = "display:block";
            ResetPasswordDTO.Token = Token;
            ResetPasswordDTO.Email = Email;
            RequestResetPasswordTokenDTO.Email = Email;
        }
        else
        {
            SendVerifyTokenStyle = "display:block";
        }
    }

    /// <summary>
    /// SetUpEditContext
    /// </summary>
    private void SetUpEditContext()
    {
        EditContext = new EditContext(ResetPasswordDTO);
        EditContext.OnFieldChanged += HandleFieldChanged!;
    }

    /// <summary>
    /// HandleFieldChanged
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="e"></param>
    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        EditContext.Validate();
    }

    /// <summary>
    /// IsPasswordResetTokenAlive
    /// </summary>
    /// <returns></returns>
    private async Task<bool> IsPasswordResetTokenAlive()
    {
        if (string.IsNullOrEmpty(UserId))
        {
            NavManager.NavigateTo("/bad-request", true);
            return false;
        }
        var response = await UserService.IsPasswordResetTokenAlive(UserId, Token)
            .ConfigureAwait(false);
        return response.Flag;
    }

    /// <summary>
    /// GetQueryString
    /// </summary>
    private void GetQueryString()
    {
        NavManager.TryGetQueryString<string>(nameof(Token), out Token);
        NavManager.TryGetQueryString<string>(nameof(Email), out Email);
        NavManager.TryGetQueryString<string>(nameof(UserId), out UserId);
    }

    /// <summary>
    /// OnHideModalClick
    /// </summary>
    /// <returns></returns>
    private async Task OnHideModalClick()
    {
        await Modal.HideAsync();
    }

    /// <summary>
    /// OnResponseModalHidden
    /// </summary>
    private void OnResponseModalHidden()
    {
        if (Response.Flag)
        {
            NavManager.NavigateTo("/login", forceLoad: true);
        }
    }

    /// <summary>
    /// ResetPassword
    /// </summary>
    /// <returns></returns>
    private async Task ResetPassword()
    {
        ResetPasswordBtn.ShowLoading(localizer["Loading..."]);

        Response = await UserService.ResetPasswordAsync(ResetPasswordDTO).ConfigureAwait(false);
        ModalMessage = Response.Message!;
        ResetPasswordBtn.HideLoading();
        await OnShowModalClick();
    }

    /// <summary>
    /// SendVerifyToken
    /// </summary>
    /// <returns></returns>
    private async Task SendVerifyToken()
    {
        SendTokenBtn.ShowLoading(localizer["Sending verify code..."]);
        var response = await UserService.SendPasswordResetTokenAsync(RequestResetPasswordTokenDTO.Email)
            .ConfigureAwait(false);
        SendTokenBtn.HideLoading();
        if (response is not null && response.Flag)
        {
            NavManager.NavigateTo("/email-comfirmed?flag=false", forceLoad: true);
            return;
        }
        NavManager.NavigateTo("/bad-request", forceLoad: true);
        return;
    }

    /// <summary>
    /// OnShowModalClick
    /// </summary>
    /// <returns></returns>
    private async Task OnShowModalClick()
    {
        await Modal.ShowAsync();
    }

    /// <summary>
    /// ShowCurrentPasswordCheckboxClicked
    /// </summary>
    /// <param name="isCheck"></param>
    private void ShowPasswordCheckboxClicked(object isCheck) => ShowPassword = !ShowPassword;
}
