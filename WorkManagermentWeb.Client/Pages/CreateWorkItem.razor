@page "/create-task/"
@inject IAuthService AuthService
@inject NavigationManager NavManager
@inject IWorkItem WorkItemService
@inject IUser UserService
@inject IStringLocalizer<Resource> localizer
@inject IJSRuntime js


<div class="row" style="margin:5px">
    <div class="col">
        <h4>
            <i class="fa fa-tasks"></i> &nbsp; @localizer["New Task"]
        </h4>
    </div>
    <hr />
</div>
<div class="container">
    <div class="row">
        <div class="col">
                <div class="card">
                <div class="card-header fw-bold"><i class="fa fa-tasks"></i> @localizer["Task Infomation"]</div>
                    <div class="card-body">
                    <EditForm Model="PostPutWorkItemDTO" Enhance OnValidSubmit="HandleSaveChangeAsync">
                        <DataAnnotationsValidator />
                        <div class="form-group mb-3">
                            <div class="row">
                                <div class="col-md-9">
                                    <div class="mb-3">
                                        <FloatingText class="form-control"
                                                      Type="text"
                                                      @bind-Value="PostPutWorkItemDTO.Title"
                                                      Placeholder="@localizer["Title"]"
                                                      Label="@localizer["Title"]">
                                        </FloatingText>
                                        <ValidationMessage For="()=>PostPutWorkItemDTO.Title" />
                                    </div>
                                </div>
                                <div class="col-md-3">
                                    <div class="mb-3">
                                        <FloatingText class="form-control"
                                                      Type="text"
                                                      @bind-Value="PostPutWorkItemDTO.WorkRemain"
                                                      Placeholder="@localizer["Duration"]"
                                                      Label="@localizer["Duration"]">
                                        </FloatingText>
                                        <ValidationMessage For="()=>PostPutWorkItemDTO.WorkRemain" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group mb-3">
                            <div class="row">
                                <div class="col">
                                    <div class="mb-3">
                                        <div class="input-wrap">
                                            <label>@localizer["Start Date - End Date"]</label>
                                            <div class="daterange">
                                                <DateRangePicker @bind-StartDate="PostPutWorkItemDTO.StartDate"
                                                                 @bind-EndDate="PostPutWorkItemDTO.EndDate" DateFormat="dd/MM/yyyy" />
                                            </div>
                                        </div>
                                        <ValidationMessage For="()=>PostPutWorkItemDTO.StartDate" />
                                        <ValidationMessage For="()=>PostPutWorkItemDTO.EndDate" />
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="mb-3">
                                        <div class="input-wrap">
                                            <label>@localizer["Parent Work Item"]</label>
                                            <AutoComplete @bind-Value="ParentCodeDisplayString"
                                                          TItem="WorkItemDTO"
                                                          DataProvider="WorkItemDataProvider"
                                                          PropertyName="@nameof(WorkItemDTO.Code)"
                                                          Placeholder="@localizer["Parent Code"]"
                                                          OnChanged="(WorkItemDTO SelectedWorkItem) => OnParentChanged(SelectedWorkItem)" />
                                        </div>
                                        <ValidationMessage For="()=>PostPutWorkItemDTO.ParentWorkItemCode" />
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="form-group mb-3">
                            <div class="row">
                                <div class="col">
                                    <div class="input-wrap">
                                        <label>@localizer["Priority"]</label>
                                        <select class="form-select" @bind="PostPutWorkItemDTO!.Priority">
                                            <option selected="@(PostPutWorkItemDTO?.Priority == null)" hidden>@localizer["Choose Priority"]</option>
                                            @foreach (var priority in SpecicalPropsInfo!.Priorities)
                                            {
                                                <option value=@priority.Id>
                                                    @localizer[priority.Id.ToString()]
                                                </option>
                                            }
                                        </select>
                                    </div>
                                    <ValidationMessage For="()=>PostPutWorkItemDTO.Priority" />
                                </div>
                                <div class="col">
                                    <div class="input-wrap">
                                        <label>@localizer["Category"]</label>
                                        <select class="form-select" @bind="PostPutWorkItemDTO!.Type">
                                            <option selected="@(PostPutWorkItemDTO?.Type == null)" hidden>@localizer["Choose Category"]</option>
                                            @foreach (var category in SpecicalPropsInfo!.Categories)
                                            {
                                                <option value=@category.Id>
                                                    @localizer[category.Id.ToString()]
                                                </option>
                                            }
                                        </select>
                                    </div>
                                    <ValidationMessage For="()=>PostPutWorkItemDTO.Type" />
                                </div>
                                @if (PostPutWorkItemDTO!.Id != Guid.Empty)
                                {
                                    <div class="col">
                                        <div class="input-wrap">
                                            <label>@localizer["Status"]</label>
                                            <select class="form-select" @bind="PostPutWorkItemDTO!.Status">
                                                <option selected="@(PostPutWorkItemDTO?.Status == null)" hidden>@localizer["Choose Status"]</option>
                                                @foreach (var status in SpecicalPropsInfo!.Statuses)
                                                {
                                                    <option value=@status.Id>
                                                        @localizer[status.Id.ToString()]
                                                    </option>
                                                }
                                            </select>
                                        </div>
                                        <ValidationMessage For="()=>PostPutWorkItemDTO.Status" />
                                    </div>
                                }
                                <div class="col">
                                    <div class="input-wrap">
                                        <label>@localizer["Assignee"]</label>
                                        <AutoComplete @bind-Value="PostPutWorkItemDTO!.AssigneeName"
                                                      TItem="UserDTO"
                                                      DataProvider="UsersDataProvider"
                                                      PropertyName="@nameof(UserDTO.Email)"
                                                      Placeholder="@localizer["Assignee"]"
                                                      OnChanged="(UserDTO SelectedUser) => OnAssigneeChanged(SelectedUser)" />
                                    </div>
                                    <ValidationMessage For="()=>PostPutWorkItemDTO.AssigneeName" />
                                </div>

                            </div>
                        </div>
                        <div class="form-group mb-3">
                            <div class="input-wrap">
                                <label>@localizer["Description"]</label>
                                <div id="toolbar">
                                    <span class="ql-formats">
                                        <select class="ql-font">
                                            <option selected=""></option>
                                            <option value="serif"></option>
                                            <option value="monospace"></option>
                                        </select>
                                        <select class="ql-size">
                                            <option value="small"></option>
                                            <option selected=""></option>
                                            <option value="large"></option>
                                            <option value="huge"></option>
                                        </select>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-bold"></button>
                                        <button class="ql-italic"></button>
                                        <button class="ql-underline"></button>
                                        <button class="ql-strike"></button>
                                    </span>
                                    <span class="ql-formats">
                                        <select class="ql-color"></select>
                                        <select class="ql-background"></select>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-list" value="ordered"></button>
                                        <button class="ql-list" value="bullet"></button>
                                        <button class="ql-indent" value="-1"></button>
                                        <button class="ql-indent" value="+1"></button>
                                        <select class="ql-align">
                                            <option selected=""></option>
                                            <option value="center"></option>
                                            <option value="right"></option>
                                            <option value="justify"></option>
                                        </select>
                                    </span>
                                    <span class="ql-formats">
                                        <button class="ql-link"></button>
                                    </span>
                                </div>
                                <div @ref="@DivEditorElement" />
                            </div>
                        </div>

                        <div class="form-group mb-3">
                            <Button @ref="SaveBtn" Class="btn btn-outline-success float-end"
                                    Type="ButtonType.Submit">
                                <Icon Name="IconName.ListCheck" /> @localizer["Save"]
                            </Button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>
<Modal @ref="Modal" OnHidden="OnModalHidden" Title="⚠ Redmine2.0">
    <BodyTemplate>
        @localizer[Response.Message]
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">✖ @localizer["Close"]</Button>
    </FooterTemplate>
</Modal>
@code{
    /// <summary>
    /// PreloadService
    /// </summary>
    [Inject] protected PreloadService PreloadService { get; set; } = default!;

    /// <summary>
    /// SaveBtn
    /// </summary>
    private Button SaveBtn = default!;

    #region
    /// <summary>
    /// DivEditorElement
    /// </summary>
    private ElementReference DivEditorElement;

    /// <summary>
    /// OnAfterRenderAsync
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetupEditor();
        }
    }

    /// <summary>
    /// SetupEditor
    /// </summary>
    /// <returns></returns>
    async Task SetupEditor()
    {
        await js.InvokeAsync<string>(
                "QuillFunctions.createQuill", DivEditorElement);
    }

    /// <summary>
    /// GetEditorContent
    /// </summary>
    /// <returns></returns>
    async Task<string> GetEditorContent()
    {
        return await js.InvokeAsync<string>(
            "QuillFunctions.getQuillContent", DivEditorElement);
    }
    #endregion

    /// <summary>
    /// Id
    /// </summary>
    public Guid Id;

    /// <summary>
    /// ParentId
    /// </summary>
    public int? ParentCode;

    /// <summary>
    /// ProjectId
    /// </summary>
    public Guid ProjectId;

    /// <summary>
    /// ParentCodeDisplayString
    /// </summary>
    private string ParentCodeDisplayString = string.Empty;

    /// <summary>
    /// PostPutWorkItemDTO
    /// </summary>
    private PostPutWorkItemDTO PostPutWorkItemDTO = new();

    /// <summary>
    /// WorkItemDTO
    /// </summary>
    private WorkItemDTO WorkItemDTO = new();

    /// <summary>
    /// SpecicalPropsInfo
    /// </summary>
    private GetPropertiesInfoResponse? SpecicalPropsInfo = new();

    /// <summary>
    /// Response
    /// </summary>
    private PostWorkItemResponse Response = new(false);

    /// <summary>
    /// Modal
    /// </summary>
    private Modal Modal = default!;

    /// <summary>
    /// OnModalHidden
    /// </summary>
    private void OnModalHidden()
    {
        if (Response.Flag)
        {
            NavManager.NavigateTo($"/task/{Response.Id}");
        }
    }

    /// <summary>
    /// OnShowModalClick
    /// </summary>
    /// <returns></returns>
    private async Task OnShowModalClick()
    {
        await Modal.ShowAsync();
    }

    /// <summary>
    /// OnHideModalClick
    /// </summary>
    /// <returns></returns>
    private async Task OnHideModalClick()
    {
        await Modal.HideAsync();
    }

    /// <summary>
    /// UsersDataProvider
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    private async Task<AutoCompleteDataProviderResult<UserDTO>> UsersDataProvider(AutoCompleteDataProviderRequest<UserDTO> request)
    {
        var response = await UserService.GetListAsync(new UsersDTO()
        {
            SearchInput = request.Filter.Value,
            BoardId = ProjectId,
            Paging = new PagingDTO()
            {
                Skip = 0,
                Take = 1000
            }
        });
        return await Task.FromResult(new AutoCompleteDataProviderResult<UserDTO>
        {
            Data = response.Users, TotalCount = response.Total
        });
    }

    /// <summary>
    /// UsersDataProvider
    /// </summary>
    /// <param name="request"></param>
    /// <returns></returns>
    private async Task<AutoCompleteDataProviderResult<WorkItemDTO>> WorkItemDataProvider(AutoCompleteDataProviderRequest<WorkItemDTO> request)
    {
        var response = await WorkItemService.GetListAsync(new WorkItemFilterDTO()
        {
            Code = int.Parse(request.Filter.Value),
            Paging = new PagingDTO()
            {
                Skip = 0,
                Take = 1000
            }
        });
        return await Task.FromResult(new AutoCompleteDataProviderResult<WorkItemDTO>
        {
            Data = response.WorkItems.Where(_ => _.Code != PostPutWorkItemDTO.Code),
            TotalCount = response.Total
        });
    }

    /// <summary>
    /// OnAssigneeChanged
    /// </summary>
    /// <param name="userDTO"></param>
    private void OnAssigneeChanged(UserDTO userDTO)
    {
        if (userDTO is not null)
        {
            PostPutWorkItemDTO.AssigneeId = userDTO.Id;
            PostPutWorkItemDTO.AssigneeName = userDTO.UserName;
        }
    }

    /// <summary>
    /// OnParentChanged
    /// </summary>
    /// <param name="workItemDTO"></param>
    private void OnParentChanged(WorkItemDTO workItemDTO)
    {
        if (workItemDTO is not null)
        {
            ParentCodeDisplayString = workItemDTO.Code.ToString()!;
            PostPutWorkItemDTO.ParentWorkItemId = workItemDTO.Id;
            PostPutWorkItemDTO.ParentWorkItemCode = workItemDTO.Code;
        }
    }

    /// <summary>
    /// HandleSaveChangeAsync
    /// </summary>
    /// <returns></returns>
    private async Task HandleSaveChangeAsync()
    {
        SaveBtn.ShowLoading(@localizer["Loading..."]);
        PostPutWorkItemDTO.Description = await GetEditorContent();
        Response = await WorkItemService.AddAsync(PostPutWorkItemDTO);
        SaveBtn.HideLoading();
        await OnShowModalClick();
    }

    /// <summary>
    /// OnInitialized
    /// </summary>
    /// <returns></returns>
    protected override void OnInitialized()
    {
        if (!AuthService.IsAuthenticated)
        {
            NavManager.NavigateTo("/login");
            return;
        }
        ShowSpinner();
        GetQueryString();
        ParentCodeDisplayString = ParentCode is not null ? ParentCode!.ToString()! : string.Empty;
        PostPutWorkItemDTO.ParentWorkItemCode = ParentCode;
        PostPutWorkItemDTO.BoardId = ProjectId;
        SpecicalPropsInfo = WorkItemService.GetSpecicalPropertiesInfo();
        HideSpinner();
    }

    /// <summary>
    /// GetQueryString
    /// </summary>
    private void GetQueryString()
    {
        NavManager.TryGetQueryString<Guid>(nameof(Id), out Id);
        NavManager.TryGetQueryString<Guid>(nameof(ProjectId), out ProjectId);
        NavManager.TryGetQueryString<int?>(nameof(ParentCode), out ParentCode);
    }

    /// <summary>
    /// OnParametersSetAsync
    /// </summary>
    /// <returns></returns>
    protected override async Task OnParametersSetAsync()
    {
        if (Id != Guid.Empty)
        {
            var response = await WorkItemService.GetByIdAsync(Id);
            if (response is null || !response.Flag)
            {
                HideSpinner();
                NavManager.NavigateTo("/not-found");
                return;
            }
            PostPutWorkItemDTO = new()
                {
                    Id = response!.WorkItem!.Id,
                    Code = response!.WorkItem!.Code,
                    Title = response!.WorkItem!.Title,
                    Description = response!.WorkItem!.Description,
                    Type = response!.WorkItem!.Type,
                    LastUpdaterId = response!.WorkItem!.LastUpdaterId,
                    CreatorId = response!.WorkItem!.CreatorId,
                    Status = response!.WorkItem!.Status,
                    AssigneeId = response!.WorkItem!.AssigneeId,
                    AssigneeName = response!.WorkItem!.AssigneeName,
                    BoardId = response!.WorkItem!.BoardId,
                    Priority = response!.WorkItem!.Priority,
                    ParentWorkItemId = response!.WorkItem!.ParentWorkItemId,
                    ParentWorkItemCode = response!.WorkItem!.ParentWorkItemCode,
                    StartDate = response!.WorkItem!.StartDate!.Value.ToDateTimeOffset(TimeZoneInfo.Utc),
                    EndDate = response!.WorkItem!.EndDate!.Value.ToDateTimeOffset(TimeZoneInfo.Utc),
                    WorkRemain = response!.WorkItem!.WorkRemain.ToString(CultureInfo.InvariantCulture),
                };
        }
    }
    /// <summary>
    /// ShowSpinner
    /// </summary>
    /// <returns></returns>
    private void ShowSpinner()
    {
        PreloadService.Show(SpinnerColor.Light);
    }

    /// <summary>
    /// HideSpinner
    /// </summary>
    /// <returns></returns>
    private void HideSpinner()
    {
        PreloadService.Hide();
    }
}
